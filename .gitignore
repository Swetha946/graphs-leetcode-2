1. Rotting Orange ::
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        fresh = set()
        rotton = set()
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 2:
                    rotton.add((i,j))
                elif grid[i][j] == 1:
                    fresh.add((i, j)) 
        mins = 0
        dirs = [(1,0), (-1,0), (0,1), (0,-1)]
        while len(fresh) > 0:
            infected = set()
            for r in rotton:
                row = r[0]
                col = r[1]
                for dir in dirs:
                    new_row = dir[0] + row
                    new_col = dir[1] + col
                    if (new_row, new_col) in fresh:
                        fresh.remove((new_row, new_col))
                        infected.add((new_row, new_col))   
            if len(infected) == 0:
                return -1
            rotton = infected
            mins += 1
        return mins
        
3. Flood Fill :: 
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        R, C = len(image), len(image[0])
        color = image[sr][sc]
        if color == newColor: return image
        def dfs(r, c):
            if image[r][c] == color:
                image[r][c] == newColor
                if r >= 1: dfs(r-1, c)
                if r+1 < R: dfs(r+1, c)
                if c >= 1: dfs(r, c-1)
                if c+1 < C: dfs(r, c+1)
        dfs(sr, sc)
        return image
